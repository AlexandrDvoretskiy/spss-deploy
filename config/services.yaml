# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Application\EventListener\KernelViewEventListener:
        tags:
            - { name: kernel.event_listener, event: kernel.view }

    App\Application\Security\AuthService:
        arguments:
            $tokenTTL: '%env(JWT_TTL_SEC)%'

    App\Controller\Web\User\Create\v2\ManagerLoggerDecorator: # Этот класс будет расширять функциональность Manager класса
        decorates: App\Controller\Web\User\Create\v2\Manager

    App\Controller\Web\Lesson\Create\v1\ManagerLoggerDecorator:
        arguments:
            $manager: '@App\Controller\Web\Lesson\Create\v1\Manager'

    App\Controller\Web\Lesson\Create\v1\ManagerInterface:
        alias: App\Controller\Web\Lesson\Create\v1\ManagerLoggerDecorator

    App\Domain\Storage\MetricsStorageInterface:
        class: App\Infrastructure\Storage\MetricsStorage
        arguments:
            - graphite
            - 8125
            - my_app

    App\Infrastructure\Storage\MetricsStorage:
        arguments:
            - graphite
            - 8125
            - my_app

    # TaskRepositoryInterface - интерфейс, который определен в слое Домена
    # TweetRepositoryCacheDecorator - реализация этого интерфейса, которая находится в слое Инфраструктуры

    App\Domain\Repository\TaskRepositoryInterface:
        alias: App\Infrastructure\Repository\TaskRepositoryCacheDecorator

    # Redis Cache

    redis_client:
        class: Redis
        factory: Symfony\Component\Cache\Adapter\RedisAdapter::createConnection
        arguments:
            - '%env(REDIS_DSN)%'

    redis_adapter:
        class: Symfony\Component\Cache\Adapter\RedisAdapter
        arguments:
            - '@redis_client'
            - 'my_app'

    App\Application\Symfony\AdapterCountingDecorator:
        arguments:
            $adapter: '@redis_adapter'

    App\Infrastructure\Repository\TaskRepositoryCacheDecorator:
        arguments:
            $cacheItemPool: '@App\Application\Symfony\AdapterCountingDecorator'

    # Tag Cache

    redis_tag_aware_adapter:
        class: Symfony\Component\Cache\Adapter\RedisTagAwareAdapter
        arguments:
            - '@redis_client'
            - 'my_app'

    App\Infrastructure\Repository\LessonRepositoryCacheDecorator:
        arguments:
            $cache: '@redis_tag_aware_adapter'

    # Queue

    App\Infrastructure\Bus\RabbitMqBus:
        calls:
            - [ 'registerProducer', [ !php/enum App\Infrastructure\Bus\AmqpExchangeEnum::AddSkills, '@old_sound_rabbit_mq.add_skills_producer' ] ]

    App\Controller\Amqp\AddSkills\Consumer:
        arguments:
            $key: 'rabbitmq.skills.add'